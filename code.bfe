%{
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <stdbool.h>

#include "gentree.h"
#include "assembly.h"
#include "reg.h"
%}

%start stat
%term OP_REG = 1 OP_NUM = 2 OP_ID = 3 OP_ADD = 4 OP_MULT = 5 OP_NEG = 6 OP_UNARY = 7 OP_OR = 8 OP_GREATER = 9 OP_HASH = 10 OP_ASSIGN = 11 OP_RETURN = 12 OP_NOT = 13

%%

stat: num
stat: reg

num: OP_UNARY(num, num)             # 1 #   bnode->val = kids[0]->val * kids[1]->val;
num: OP_MULT(num, num)              # 1 #   bnode->val=kids[0]->val * kids[1]->val;
num: OP_ADD(num, num)               # 1 #   bnode->val=kids[0]->val + kids[1]->val;
num: OP_OR(num, num)                # 1 #   bnode->val = kids[0]->val | kids[1]->val;
num: OP_GREATER(num, num)           # 1 #   bnode->val = kids[0]->val > kids[1]->val ? -1 : 0;
num: OP_HASH(num, num)              # 1 #   bnode->val = kids[0]->val != kids[1]->val ? -1 : 0;

num: OP_ASSIGN(OP_ID, num)          # 1 #   writeDecleration(bnode->kids[0]->val, bnode->kids[1]->val);

reg: OP_ASSIGN(OP_ID, reg)          # 1 #   writeDeclerationReg(bnode->kids[0]->val, bnode->kids[1]->regname);

reg: OP_RETURN(num)                 # 1 #   writeReturnNum(kids[0]->val);
reg: OP_RETURN(reg)                 # 1 #   writeReturnReg(kids[0]->regname);

reg: OP_ADD(reg, num)               # 1 #   freeAndNewReg(bnode, true, false); writeOPNumRegDest("addq", kids[1]->val, kids[0]->regname, bnode->regname);
reg: OP_MULT(reg, num)              # 1 #   freeAndNewReg(bnode, true, false); writeOPNumRegDest("imulq", kids[1]->val, kids[0]->regname, bnode->regname);
reg: OP_OR(reg, num)                # 1 #   freeAndNewReg(bnode, true, false); writeOPNumRegDest("or", kids[1]->val, kids[0]->regname, bnode->regname);
reg: OP_GREATER(reg, num)           # 1 #   freeAndNewReg(bnode, true, false); writeGreaterThanRegNum(kids[0]->regname, kids[1]->val, bnode->regname);
reg: OP_HASH(reg, num)              # 1 #   freeAndNewReg(bnode, true, false); writeNotEqualsRegNum(kids[0]->regname, kids[1]->val, bnode->regname);

reg: OP_ADD(num, reg)               # 1 #   freeAndNewReg(bnode, false, true); writeOPNumRegDest("addq", kids[0]->val, kids[1]->regname, bnode->regname);
reg: OP_MULT(num, reg)              # 1 #   freeAndNewReg(bnode, false, true); writeOPNumRegDest("imulq", kids[0]->val, kids[1]->regname, bnode->regname);
reg: OP_OR(num, reg)                # 1 #   freeAndNewReg(bnode, false, true); writeOPNumRegDest("or", kids[0]->val, kids[1]->regname, bnode->regname);
reg: OP_GREATER(num, reg)           # 1 #   freeAndNewReg(bnode, false, true); writeGreaterThanNumReg(kids[0]->val, kids[1]->regname, bnode->regname);
reg: OP_HASH(num, reg)              # 1 #   freeAndNewReg(bnode, false, true); writeNotEqualsRegNum(kids[1]->regname, kids[0]->val, bnode->regname);

reg: OP_ADD(reg, reg)               # 1 #   freeAndNewReg(bnode, true, true); writeOpRegRegDest("addq", kids[0]->regname, kids[1]->regname, bnode->regname);
reg: OP_MULT(reg, reg)              # 1 #   freeAndNewReg(bnode, true, true); writeOpRegRegDest("imulq", kids[0]->regname, kids[1]->regname, bnode->regname);
reg: OP_OR(reg, reg)                # 1 #   bnode->regname = kids[0]->regname; writeOpRegReg("or", kids[0]->regname, kids[1]->regname);
reg: OP_GREATER(reg, reg)           # 1 #   freeAndNewReg(bnode, true, true); writeGreaterThan(kids[0]->regname, kids[1]->regname, bnode->regname);
reg: OP_HASH(reg, reg)              # 1 #   freeAndNewReg(bnode, true, true); writeNotEqualsRegReg(kids[0]->regname, kids[1]->regname, bnode->regname);


reg: OP_UNARY(num, reg)             # 1 #   bnode->regname = kids[1]->regname; writeNeg(kids[0]->val, kids[1]->regname);
num: OP_NEG(num)                    # 1 #   bnode->val = -1*kids[0]->val;

num: OP_NUM                         # 1 #   
reg: OP_ID                          # 1 #   bnode->regname = loadId(bnode);

%%

extern treenode *root;
extern int yyparse(void);
void burm_reduce(NODEPTR_TYPE bnode, int goalnt);
regm_t *regm;

void freeAndNewReg(treenode *n, bool k0, bool k1) {
    if(k0) freeReg(regm, n->kids[0]->regname);
    if(k1) freeReg(regm, n->kids[1]->regname);
    n->regname = newReg(regm);
}

char *loadId(treenode *idNode) {
    int offset = idNode->val;
    enum VAR_TYPE type = idNode->type;

    if(type == PAR) {
       return regm->regs[offset];
    } 

    char *reg = newReg(regm);

    if(type == LOC) {
        writeLoadFromStack(offset, reg);
    } else if(type == OBJ) {
        writeLoadFromObjVar(offset, reg);
    } 


   return reg; 
}

void invoke_burm(NODEPTR_TYPE root, unsigned parCount) {
    regm = initRegM(parCount);
    burm_label(root);
    burm_reduce(root, 1);
    destroyRegM(regm);
}