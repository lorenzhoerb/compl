%{
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include "gentree.h"
%}

%start num
%term OP_REG = 1 OP_NUM = 2 OP_ID = 3 OP_ADD = 4 OP_MULT = 5 OP_NEG = 6 OP_UNARY = 7 OP_OR = 8 OP_GREATER = 9 OP_HASH = 10

%%

num: OP_UNARY(num, num) # 1 # printf("Calc: %d\n", kids[0]->val * kids[1]->val); bnode->val = kids[0]->val * kids[1]->val;
num: OP_NEG(num)     # 1 # bnode->val = -1*kids[0]->val;

num: OP_MULT(num, num)   # 1 # printf("Calculate: %d * %d = %d\n", kids[0]->val, kids[1]->val, kids[0]->val * kids[1] ->val); bnode->val=kids[0]->val * kids[1]->val;
num: OP_ADD(num, num)   # 1 # printf("Calculate: %d + %d = %d\n", kids[0]->val, kids[1]->val, kids[0]->val + kids[1] ->val); bnode->val=kids[0]->val + kids[1]->val;
num: OP_OR(num, num) # 1 # printf("Calculated bit or: %d\n", kids[0]->val | kids[1]->val); bnode->val = kids[0]->val | kids[1]->val;
num: OP_GREATER(num, num) # 1 # printf("%d > %d = %d\n", kids[0]->val, kids[1]->val, kids[0]->val > kids[1]->val ? -1 : 0); bnode->val = kids[0]->val > kids[1]->val ? -1 : 0;
num: OP_HASH(num, num) # 1 # printf("%d HASH  %d = %d\n", kids[0]->val, kids[1]->val, kids[0]->val != kids[1]->val ? -1 : 0); bnode->val = kids[0]->val != kids[1]->val ? -1 : 0;

num:	OP_NUM     # 1 # 

%%

extern treenode *root;
extern int yyparse(void);
void burm_reduce(NODEPTR_TYPE bnode, int goalnt);

void invoke_burm(NODEPTR_TYPE root) {
    burm_label(root);
    burm_reduce(root, 1);
}